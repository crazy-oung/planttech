plants =  [[1, 2.5, 54.4, 130, -8.1], [2, 32.3, 69.9, 186, 43.4], [3, 10.0, 52.3, 946, -47.8], [4, 3.8, 84.5, 181, 28.6], [5, 26.6, 61.1, 253, -20.1], [6, 44.2, 76.8, 754, 115.3], [7, 45.9, 37.1, 262, -3.0], [8, 6.3, 72.7, 693, -44.0], [9, 22.0, 54.3, 505, 97.8], [10, 43.5, 40.6, 929, -10.7], [11, 30.0, 24.0, 282, 68.2], [12, 15.1, 35.2, 722, 88.8], [13, 7.7, 71.7, 979, 116.9], [14, 3.6, 45.7, 674, 8.1], [15, 43.9, 38.1, 79, -11.6], [16, 8.5, 59.7, 815, -24.5], [17, 14.9, 81.7, 181, 83.4], [18, 37.7, 55.1, 980, -8.3], [19, 6.3, 81.5, 28, 55.4], [20, 32.0, 85.7, 40, 76.1], [21, 30.0, 60.9, 622, 85.9], [22, 0.3, 24.4, 784, 4.8], [23, 29.5, 56.9, 718, -10.7], [24, 26.4, 86.0, 614, 88.6], [25, 38.4, 27.6, 44, 69.9], [26, 38.3, 82.2, 980, 101.4], [27, 34.0, 89.1, 486, 53.1], [28, 7.6, 81.0, 483, -11.9], [29, 27.8, 67.4, 703, 8.9], [30, 19.6, 61.0, 844, 1.2], [31, 29.8, 49.5, 382, 122.9], [32, 31.6, 39.6, 940, 43.1], [33, 47.8, 55.9, 684, 70.2], [34, 21.5, 39.2, 226, 12.1], [35, 10.6, 24.4, 898, 28.2], [36, 17.7, 88.5, 657, 7.0], [37, 30.6, 89.8, 123, -8.5], [38, 26.1, 87.3, 681, 9.1], [39, 17.3, 41.8, 92, 33.1], [40, 22.8, 72.3, 471, 24.8], [41, 16.3, 32.4, 497, 5.4], [42, 5.6, 83.3, 522, 92.7], [43, 5.6, 32.6, 84, -44.8], [44, 36.1, 58.3, 269, 38.7], [45, 2.8, 29.1, 856, 28.8], [46, 38.3, 61.9, 533, 109.2], [47, 15.4, 47.5, 183, 10.1], [48, 47.9, 48.4, 791, 69.1], [49, 24.7, 41.0, 849, -13.5], [50, 21.7, 43.3, 488, 83.6], [51, 34.1, 32.9, 211, 80.1], [52, 5.5, 74.7, 288, 34.8], [53, 35.3, 65.8, 859, 111.1], [54, 24.1, 30.6, 954, -8.6], [55, 34.4, 82.0, 546, 57.7], [56, 10.2, 38.7, 767, 5.4], [57, 46.2, 25.5, 17, 75.1], [58, 28.7, 23.9, 949, 32.7], [59, 33.8, 63.2, 599, 67.5], [60, 13.7, 76.3, 237, 107.2], [61, 30.5, 35.9, 740, -31.5], [62, 10.1, 65.3, 336, 95.3], [63, 45.3, 39.7, 1013, -12.5], [64, 13.1, 50.5, 655, -1.6], [65, 44.0, 38.3, 249, 113.1], [66, 42.9, 31.8, 917, 76.9], [67, 30.8, 88.3, 85, 105.5], [68, 3.2, 64.0, 357, -31.8], [69, 23.0, 33.1, 344, 58.2], [70, 27.3, 52.0, 59, -18.1], [71, 28.0, 22.8, 796, 99.1], [72, 17.0, 43.7, 808, 67.4], [73, 0.5, 89.3, 1019, 2.6], [74, 31.2, 88.7, 844, 68.0], [75, 30.7, 43.8, 431, 122.8], [76, 15.8, 62.0, 315, -45.6], [77, 8.3, 78.0, 354, 22.3], [78, 34.6, 40.0, 394, 51.7], [79, 3.9, 33.7, 141, 27.0], [80, 29.9, 25.8, 773, 72.4], [81, 49.5, 81.8, 959, 59.7], [82, 15.6, 67.7, 1003, 102.6], [83, 35.2, 21.0, 119, -39.3], [84, 33.3, 74.2, 918, 64.7], [85, 20.5, 88.0, 7, 117.9], [86, 32.7, 34.7, 301, -22.9], [87, 25.9, 35.8, 857, -2.5], [88, 22.6, 44.5, 930, 94.4], [89, 35.2, 25.7, 433, -11.0], [90, 31.5, 24.7, 822, -17.5], [91, 49.8, 61.5, 911, 56.8], [92, 33.7, 65.2, 943, 0.8], [93, 44.7, 27.9, 776, -25.4], [94, 49.3, 28.7, 580, -22.4], [95, 17.8, 46.4, 560, -31.6], [96, 4.6, 64.9, 686, 25.1], [97, 24.0, 58.6, 909, 79.4], [98, 47.2, 34.3, 870, 121.9], [99, 7.0, 63.6, 532, -47.7], [100, 13.9, 37.0, 948, 59.2]]
normalized_data =  [[1, 0.5, 0.5, 1.0, 0.0], [2, 0.5, 0.5, 1.0, 0.0], [3, 0.5, 0.5, 0.0, 0.0], [4, 0.5, 1.0, 1.0, 0.5], [5, 0.5, 0.5, 1.0, 0.0], [6, 0.0, 1.0, 0.5, 0.0], [7, 0.0, 0.0, 1.0, 0.0], [8, 0.5, 1.0, 0.5, 0.0], [9, 1.0, 0.5, 0.5, 0.0], [10, 0.0, 0.5, 0.0, 0.0], [11, 0.5, 0.0, 1.0, 0.0], [12, 1.0, 0.0, 0.5, 0.0], [13, 0.5, 0.5, 0.0, 0.0], [14, 0.5, 0.5, 0.5, 0.5], [15, 0.0, 0.5, 1.0, 0.0], [16, 0.5, 0.5, 0.0, 0.0], [17, 1.0, 1.0, 1.0, 0.0], [18, 0.5, 0.5, 0.0, 0.0], [19, 0.5, 1.0, 0.5, 0.0], [20, 0.5, 1.0, 0.5, 0.0], [21, 0.5, 0.5, 0.5, 0.0], [22, 0.0, 0.0, 0.0, 0.5], [23, 0.5, 0.5, 0.5, 0.0], [24, 0.5, 1.0, 0.5, 0.0], [25, 0.5, 0.0, 0.5, 0.0], [26, 0.5, 1.0, 0.0, 0.0], [27, 0.5, 1.0, 0.5, 0.0], [28, 0.5, 1.0, 0.5, 0.0], [29, 0.5, 0.5, 0.5, 0.5], [30, 1.0, 0.5, 0.0, 0.0], [31, 0.5, 0.5, 0.5, 0.0], [32, 0.5, 0.5, 0.0, 0.0], [33, 0.0, 0.5, 0.5, 0.0], [34, 1.0, 0.5, 1.0, 0.5], [35, 0.5, 0.0, 0.0, 0.5], [36, 1.0, 1.0, 0.5, 0.5], [37, 0.5, 1.0, 1.0, 0.0], [38, 1.0, 1.0, 0.5, 0.5], [39, 1.0, 0.5, 1.0, 0.5], [40, 1.0, 0.5, 0.5, 1.0], [41, 1.0, 0.0, 0.5, 0.5], [42, 0.5, 1.0, 0.5, 0.0], [43, 0.5, 0.0, 1.0, 0.0], [44, 0.5, 0.5, 1.0, 0.5], [45, 0.5, 0.0, 0.0, 0.5], [46, 0.5, 0.5, 0.5, 0.0], [47, 1.0, 0.5, 1.0, 0.5], [48, 0.0, 0.5, 0.0, 0.0], [49, 1.0, 0.5, 0.0, 0.0], [50, 1.0, 0.5, 0.5, 0.0], [51, 0.5, 0.0, 1.0, 0.0], [52, 0.5, 1.0, 1.0, 0.5], [53, 0.5, 0.5, 0.0, 0.0], [54, 1.0, 0.0, 0.0, 0.0], [55, 0.5, 1.0, 0.5, 0.0], [56, 0.5, 0.5, 0.5, 0.5], [57, 0.0, 0.0, 0.5, 0.0], [58, 0.5, 0.0, 0.0, 0.5], [59, 0.5, 0.5, 0.5, 0.0], [60, 0.5, 1.0, 1.0, 0.0], [61, 0.5, 0.0, 0.5, 0.0], [62, 0.5, 0.5, 0.5, 0.0], [63, 0.0, 0.5, 0.0, 0.0], [64, 0.5, 0.5, 0.5, 0.0], [65, 0.0, 0.5, 1.0, 0.0], [66, 0.0, 0.0, 0.0, 0.0], [67, 0.5, 1.0, 1.0, 0.0], [68, 0.5, 0.5, 0.5, 0.0], [69, 1.0, 0.0, 0.5, 0.0], [70, 0.5, 0.5, 0.5, 0.0], [71, 0.5, 0.0, 0.0, 0.0], [72, 1.0, 0.5, 0.0, 0.0], [73, 0.0, 1.0, 0.0, 0.5], [74, 0.5, 1.0, 0.0, 0.0], [75, 0.5, 0.5, 0.5, 0.0], [76, 1.0, 0.5, 1.0, 0.0], [77, 0.5, 1.0, 0.5, 1.0], [78, 0.5, 0.5, 0.5, 0.0], [79, 0.5, 0.0, 1.0, 0.5], [80, 0.5, 0.0, 0.0, 0.0], [81, 0.0, 1.0, 0.0, 0.0], [82, 1.0, 0.5, 0.0, 0.0], [83, 0.5, 0.0, 1.0, 0.0], [84, 0.5, 1.0, 0.0, 0.0], [85, 1.0, 1.0, 0.5, 0.0], [86, 0.5, 0.0, 1.0, 0.0], [87, 1.0, 0.0, 0.0, 0.0], [88, 1.0, 0.5, 0.0, 0.0], [89, 0.5, 0.0, 0.5, 0.0], [90, 0.5, 0.0, 0.0, 0.0], [91, 0.0, 0.5, 0.0, 0.0], [92, 0.5, 0.5, 0.0, 0.0], [93, 0.0, 0.0, 0.0, 0.0], [94, 0.0, 0.0, 0.5, 0.0], [95, 1.0, 0.5, 0.5, 0.0], [96, 0.5, 0.5, 0.5, 1.0], [97, 1.0, 0.5, 0.0, 0.0], [98, 0.0, 0.0, 0.0, 0.0], [99, 0.5, 0.5, 0.5, 0.0], [100, 0.5, 0.0, 0.0, 0.0]]
state_data =  [0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 1, 0, 1, 0.5, 1, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0]

def calculate_weights(plants, normalized_data, state_data):
    weights = [0, 0, 0, 0]  # 온도센서, 습도센서, 조도센서, 물온도센서의 가중치를 저장할 리스트
    state_sum = sum(state_data)  # 모든 식물의 상태값의 합

    for i in range(len(plants)):
        for j in range(4):  # 온도센서, 습도센서, 조도센서, 물온도센서에 대해 가중치 계산
            weights[j] += normalized_data[i][j] * state_data[i]

    # 가중치의 합이 1이 되도록 정규화
    weights_sum = sum(weights)
    for j in range(4):
        weights[j] /= weights_sum

    return weights


print(calculate_weights(plants, normalized_data, state_data))
